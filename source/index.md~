---
title: TridentSDK Docs

language_tabs:
  - shell
  - java

toc_footers:
  - <a href='https://tridentsdk.net'>TridentSDK Website</a>
  - <a href='https://github.com/TridentSDK'>TridentSDK on GitHub</a>
  - <a href='https://twitter.com/TridentSDK'>Follow Us on Twitter</a>
  - <a href='http://github.com/AgentTroll/slate'>Contribute to the Docs</a>
  - <a href='http://github.com/tripit/slate'>Generated by Slate</a>

includes:

search: true
---

# Introduction

<aside class="notice">
Welcome to the TridentSDK Documentation site.
</aside>

TridentSDK is a team composed of absolute best Java developers from the Bukkit API. Trident is a completely cleanroom reimplmentation of the Minecraft server, which will improve server performance, flexibility, and simplicity. 

TridentSDK is the successor to the Bukkit/Spigot projects. Following the news of the "takeover" of the Bukkit project and the DMCA takedown of Bukkit, and therefore Spigot (we are quite aware of binary patches), we realized that someone needs to step up and create the best of server software for Minecraft after the decline of both projects. The result was TridentSDK, the development kit that is implemented by the server, Trident.

# Features

Feature | Explanation | Other servers
------- | ----------- | -------------
Developers | We are top-of-the-line developers from the Bukkit API | &#x2717;
Community | We are active community members and have high-profile connections to other developers | &#x2717;
Cleanroom | Legally stable, performance-oriented, controlled, simple | &#x2717;
Multithreaded | Effectively utilizes modern CPUs | &#x2717;
Tested | Published with results, all aspects and benchmarks + comparison included | &#x2717;
Pace | Development occurs nearly everyday | &#x2717;

# Installation

Because TridentSDK is currently a high-paced work in progress, and the reimplementation of the entire Minecraft server is time-taking, there are no builds availible to use. The server does not work at the moment. You will need to download the source and compile off of eachother.

## Prestiques

To install Trident, you should have the following installed on your system:

* [JDK 7](https://docs.oracle.com/javase/7/docs/webnotes/install/) 
* [Maven](http://maven.apache.org/download.cgi)
* [Git](http://git-scm.com/downloads)

## Source download

> To download the server source, use:

```shell
git clone https://github.com/TridentSDK/Trident.git
```

> To download the API source, use:

```shell
git clone https://github.com/TridentSDK/TridentSDK.git
```

> To compile the final jar, use:

```shell
cd TridentSDK
mvn clean install

# Unix
mv target/tridentsdk-1.0-SNAPSHOT.jar ..
# Windows
move target/tridentsdk-1.0-SNAPSHOT.jar ..

cd ../Trident
javac -d .. -cp "../tridentsdk-1.0-SNAPSHOT.jar" src/main/java/ src/main/java/net/tridentsdk/server/TridentStart.java
cd ..
```

After completing the above steps, you should be in the starting directory, with a fully compiled jar that can be run from the command line to start your server.


## Troubleshooting

#### Command not found

TridentSDK is developed primarily on Unix (Ubuntu, Debian) systems. If you get this, look up an alternative to your command on your OS.

If your command starts with `git`, `mvn`, or `javac`, then you either need to install, or reinstall the tools in [Prestiques](#prestiques).

Another problem may be that you have not set your PATH environment variables yet. This is covered on the Presitques links.

#### Paths cannot be resolved

Just edit `..` to your primary directory where you executed your git commands at

#### Where is my jar file?

It's in the working directory of the command line. For Unix, this is often in your Home directory, and for Windows, this is in the user directory. Therefore, I recommend `cd`'ing to your desktop or other place where you know exactly where all the files are going to go and how they are organized.

## Updating

We are currently planning an update mechanism built into the server in the future. However, at the current moment, it has not been implemented. Open up your command line and execute the commands shown.

```shell
# Remove old files
rm -r Trident
rm -r TridentSDK

# Download again
git clone https://github.com/TridentSDK/Trident.git
git clone https://github.com/TridentSDK/TridentSDK.git
```

> Now go to [Source download](#source-download) and use the `To compile the final jar` steps.

# Contributing

On the left, near the bottom, you can see a few links. Currently, there are 3 portions of the project that help would be needed in, 2 which are effective as of now.

First, we will need help with the source. The highest priority right now is player joining, which we have the protocol and world loading facitlities that are mature enough to be used for the purpose. The protocol is very elusive, and if you have used it before, help would be appreciated. Head over to our GitHub page, or tweet to us to find out how to help.

Second, we will need help with documentation. There are two places where documentation is needed - here, and on the source. Javadocs are sparingly done, as forward development and getting performance testing and finishing the server basics is the main priority. We could use some extra hands on source documentation. The documentation here is how to use the API, not what each method does. Head over to the Contribute to the Docs and submit a PR to the index.md on master, and we can recompile the site. Or, head over to the GitHub and submit a PR to add documentation comments to the methods.

Third, and our lowest priority, is commumnity administration. As we do not have a large community yet, you may help by sharing TridentSDK with your friends and users, and later on, when TridentSDK grows, you can apply for administration positions. 

# API

TridentSDK provides an excellent API for developing server modifications that can be used to modify game play that is determined by the server.

## Prestiques

* [A Java IDE](http://en.wikibooks.org/wiki/Java_Programming/Java_IDEs)
* [JDK 7](https://docs.oracle.com/javase/7/docs/webnotes/install/) 
* [Maven](http://maven.apache.org/download.cgi)
* [Git](http://git-scm.com/downloads)
* Knowledge of the Java language

## Starting

As well as what is required in the prestiques, it is **imperative** that you know how to use Java and are familiar with it.

After you have sufficient familiarity with Java, you may checkout our [Javadocs](http://agenttroll.github.io/tridentsdk-jd/), but you may want to continue further with the documentation (there are lots of packages!) before starting.

## Setup

> Getting TridentSDK

```shell
git clone https://github.com/TridentSDK/TridentSDK.git
cd TridentSDK
mvn clean install
```

First, you would want to pull from our `TridentSDK` repo, and compile it. The dependency can be found in the `target` folder after running `mvn clean install`. 

Then, start up your IDE, which you should learn how to use from the distributor's website. If you do not know how to use your IDE (which is used when practicing Java), go back to learning Java. Otherwise, create a new project, and add the TridentSDK dependency to your workspace.

## Creating the main class

The first step in development of a Trident plugin is to create the main class. This is where all of your plugin's functional aspects are initialized and started. Create a new package titled with your domain, backwards. For example, if you own `example.com`, then your package would be `com.example.project`, and project can be changed to your project name. This does not affect functionality. If you do not own a domain, you can use your email. For example, if you owned `someone@random.com`, then use `com.random.someone`. If you have a `-` character, use an underscore (`_`) instead.

<aside class="warning">
DO NOT use the package name `net.tridentsdk.*`. Anything starting with that package will not have its classes loaded, therefore rendering the plugin useless.

In the code examples, a `net.tridentsdk` domain is used for example ONLY.
</aside>

Then, create a new Java class, which is named your project name. The class name does not affect functionality. After creating it, you would `extend TridentPlugin`, where TridentPlugin is `net.tridentsdk.plugin.TridentPlugin`.

```java
package net.tridentsdk.project;

import net.tridentsdk.plugin.TridentPlugin;

public class Project extends TridentPlugin {

}
```

Then, you would add a PluginDescription annotation to your class to mark the load parameters.

```java
package net.tridentsdk.project;

import net.tridentsdk.plugin.TridentPlugin;
import net.tridentsdk.plugin.annotation.PluginDescription;

@PluginDescription(name = "Project", author = "Pierre C", version = "6.9")
public class Project extends TridentPlugin {

}
```

Of course, replace the name with the name of the project (does not affect functionality), the author with your name/username/online name/alias (does not affect functionality), and the version with the plugin version (does not affect functionality).

In reality, if this is a quick test plugin, only the `name` field is required to be filled.
